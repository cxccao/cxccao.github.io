{"title":"类加载器","date":"2020-07-13T03:56:58.000Z","date_formatted":{"ll":"2020年7月13日","L":"2020/07/13","MM-DD":"07-13"},"link":"2020/07/13/类加载器","tags":["JVM"],"updated":"2020-07-27T03:52:03.544Z","content":"<h1 id=\"类加载器\">类加载器<a href=\"#类加载器\" title=\"类加载器\"></a></h1><blockquote>\n<p>一个非数组类的加载阶段（加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去完成还可以自定义类加载器去控制字节流的获取方式（重写一个类加载器的 <code>loadClass()</code> 方法）。数组类型不通过类加载器创建，它由 Java 虚拟机直接创建。</p>\n<p>所有的类都由类加载器加载，加载的作用就是将 .class文件加载到内存。</p>\n</blockquote>\n<h2 id=\"三个类加载器\">三个类加载器<a href=\"#三个类加载器\" title=\"三个类加载器\"></a></h2><ol><li>BootstrapClassLoader：启动类加载器，最顶层的加载器，由C++实现，负责加载%JAVA_HOME%/lib下的jar包和类。</li>\n<li>ExtensionClassLoader：扩展类加载器。负责加载%JRE_HOME%/lib/ext下的jar包和类，或被java.ext.dirs系统变量指定路径下的jar包。</li>\n<li>AppClassLoader：应用程序类加载器。负责加载当前classpath下的jar包和类。</li>\n</ol><h2 id=\"双亲委派模型\">双亲委派模型<a href=\"#双亲委派模型\" title=\"双亲委派模型\"></a></h2><img src=\"/2020/07/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png\" class=\"\"><p>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。如果一个类加载器需要加载类，那么首先它会把这个类请求委派给父类加载器去完成，每一层都是如此。一直递归到顶层，当父加载器无法完成这个请求时，子类才会尝试去加载。</p>\n<p>双亲委派模型保证了Java程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类），也保证了 Java 的核心 API 不被篡改。如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>Integer</code> 类的话，那么程序运行的时候，系统就会出现多个不同的 <code>Integer</code> 类。</p>\n<p><strong>双亲委派模型不是一种强制性约束。</strong>为了避免双亲委托机制，我们可以自己定义一个类加载器，然后重写 <code>loadClass()</code> 即可。</p>\n","prev":{"title":"快速失败和安全失败","link":"2020/07/13/快速失败和安全失败"},"next":{"title":"类的生命周期","link":"2020/07/13/类的生命周期"},"plink":"https://cxccao.github.io/2020/07/13/类加载器/","toc":[{"id":"类加载器","title":"类加载器","index":"1","children":[{"id":"三个类加载器","title":"三个类加载器","index":"1.1"},{"id":"双亲委派模型","title":"双亲委派模型","index":"1.2"}]}],"copyright":{"author":"Shelton Chen","link":"<a href=\"https://cxccao.github.io/2020/07/13/类加载器/\" title=\"类加载器\">https://cxccao.github.io/2020/07/13/类加载器/</a>","updated":"2020年7月27日","license":"署名-非商业性使用-相同方式共享 4.0 国际 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}