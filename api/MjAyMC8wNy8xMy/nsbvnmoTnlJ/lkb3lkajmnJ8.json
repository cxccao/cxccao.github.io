{"title":"类的生命周期","date":"2020-07-13T02:51:21.000Z","date_formatted":{"ll":"2020年7月13日","L":"2020/07/13","MM-DD":"07-13"},"link":"2020/07/13/类的生命周期","tags":["JVM"],"updated":"2020-07-17T08:45:30.739Z","content":"<h1 id=\"类的生命周期\">类的生命周期<a href=\"#类的生命周期\" title=\"类的生命周期\"></a></h1><p>一个类的完整生命周期为</p>\n<img src=\"/2020/07/13/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\"><h2 id=\"加载\">加载<a href=\"#加载\" title=\"加载\"></a></h2><ul><li>通过全类名定义此类的二进制字节流</li>\n<li>将字节流锁代表的静态存储结构转换方法区的运行时数据结构</li>\n<li>在内存中生成一个代表该类的Class对象，作为方法去访问这些数据的入口</li>\n</ul><h2 id=\"连接\">连接<a href=\"#连接\" title=\"连接\"></a></h2><h3 id=\"验证\">验证<a href=\"#验证\" title=\"验证\"></a></h3><ul><li>文件格式验证（验证字节流是否复合Class文件格式规范，如是否以0xCAFEBABE开头等）</li>\n<li>元数据验证 （对字节码描述的信息进行语义分析，如类是否由父类，除了Object都有父类，类是否继承了不允许继承的类，等等）</li>\n<li>字节码验证（确保程序语义是合法的）</li>\n<li>符号引用验证（确保解析动作能正确执行）</li>\n</ul><h3 id=\"准备\">准备<a href=\"#准备\" title=\"准备\"></a></h3><ul><li>为类变量（static，不包括实例变量）分配内存</li>\n<li>设置类变量初始值（各数据类型的默认零值）</li>\n</ul><h3 id=\"解析\">解析<a href=\"#解析\" title=\"解析\"></a></h3><ul><li>虚拟机将常量池内的符号引用替换为直接引用，也就是得到类或者字段、方法在内存中的指针或者偏移量。</li>\n</ul><h2 id=\"初始化\">初始化<a href=\"#初始化\" title=\"初始化\"></a></h2><ul><li><p>执行类构造器<code>&lt;clinit&gt;()</code>方法（线程安全）的过程。（<code>&lt;init&gt;()</code>是对象构造器方法）</p>\n<blockquote>\n<p>init is the (or one of the) constructor(s) for the instance, and non-static field initialization.（instance实例构造器，对非静态变量解析初始化）<br>clinit are the static initialization blocks for the class, and static field initialization.（class类构造器对静态变量，静态代码块进行初始化）</p>\n</blockquote>\n</li>\n<li><p>类的初始化时机</p>\n<ul><li>当遇到new、getstatic、putstatic、invokestatic这四条字节码指令时（new一个类、读取静态变量、赋值静态变量、调用静态方法）</li>\n<li>使用java.lang.reflect包的方法进行反射调用时，如果未初始化就会初始化</li>\n<li>如果类的父类未初始化则先触发父类的初始化</li>\n<li>在虚拟机启动时某个含有 main() 方法的主类</li>\n<li>当一个接口中定义了JDK8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化</li>\n</ul></li>\n<li><p>满足下列条件之一则没有<code>&lt;clinit&gt;()</code>方法</p>\n<ul><li>未声明任何类变量，也没有静态初始化语句</li>\n<li>声明了类变量，但没有明确使用类案例初始化语句或静态初始化语句</li>\n<li>仅包含静态final变量的类变量初始化语句，并且类变量初始化是编译时常量表达式</li>\n</ul></li>\n</ul><h2 id=\"卸载\">卸载<a href=\"#卸载\" title=\"卸载\"></a></h2><p>即该类的Class对象被垃圾回收。</p>\n<ul><li>该类的所有实例均被GC</li>\n<li>该类没有任何引用</li>\n<li>该类的类加载器的实例已被GC</li>\n</ul><p>jdk自带的BootstrapClassLoader,PlatformClassLoader,AppClassLoader负责加载jdk提供的类，所以它们(类加载器的实例)肯定不会被回收。而我们自定义的类加载器的实例是可以被回收的。</p>\n","prev":{"title":"类加载器","link":"2020/07/13/类加载器"},"next":{"title":"关于JVM垃圾回收","link":"2020/07/12/关于JVM垃圾回收"},"plink":"https://cxccao.github.io/2020/07/13/类的生命周期/","toc":[{"id":"类的生命周期","title":"类的生命周期","index":"1","children":[{"id":"加载","title":"加载","index":"1.1"},{"id":"连接","title":"连接","index":"1.2","children":[{"id":"验证","title":"验证","index":"1.2.1"},{"id":"准备","title":"准备","index":"1.2.2"},{"id":"解析","title":"解析","index":"1.2.3"}]},{"id":"初始化","title":"初始化","index":"1.3"},{"id":"卸载","title":"卸载","index":"1.4"}]}],"copyright":{"author":"Shelton Chen","link":"<a href=\"https://cxccao.github.io/2020/07/13/类的生命周期/\" title=\"类的生命周期\">https://cxccao.github.io/2020/07/13/类的生命周期/</a>","updated":"2020年7月17日","license":"署名-非商业性使用-相同方式共享 4.0 国际 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}