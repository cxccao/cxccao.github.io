{"title":"Tiny-Spring","date":"2020-06-19T13:47:06.000Z","date_formatted":{"ll":"2020年6月19日","L":"2020/06/19","MM-DD":"06-19"},"link":"2020/06/19/tiny-spring","tags":["Spring"],"updated":"2020-06-28T07:37:19.732Z","content":"<p>试着实现一个Tiny-Spring</p>\n<a id=\"more\"></a><h1 id=\"引言\">引言<a href=\"#引言\" title=\"引言\"></a></h1><p>注意到<a href=\"https://github.com/code4craft\" target=\"_blank\">code4craft</a>的tiny-spring项目，实现了一个小型的spring框架，提供了对IOC和AOP的基本支持，麻雀虽小五脏俱全。 跟着一边实现, 一边记录一下。</p>\n<p><a href=\"https://github.com/cxccao/tiny-spring\" target=\"_blank\">项目</a>放在github上。</p>\n<h1 id=\"ioc\">IOC<a href=\"#ioc\" title=\"IOC\"></a></h1><h2 id=\"回顾一下ioc的知识\">回顾一下IOC的知识<a href=\"#回顾一下ioc的知识\" title=\"回顾一下IOC的知识\"></a></h2><p>IOC，Inversion of Control，控制反转。IOC思想最核心的地方在于，资源的控制权，不由使用资源的双方管理，而由不使用资源的第三方管理。DI（Dependency Injection，依赖注入）是IOC的具体实现。DI就是把底层类作为参数传入上层类，实现上层类对下层类的控制。</p>\n<p>要实现一个IOC容器，我们通过反射来获取类的所有信息，通过配置文件来描述类与类之间的关系（这里只使用xml文件来完成），这样我们就可以构建出类与类的依赖关系。</p>\n<h2 id=\"最基本的容器\">最基本的容器<a href=\"#最基本的容器\" title=\"最基本的容器\"></a></h2><p>IOC最基本的角色有两个：Bean工厂（BeanFactory）和Bean本身。这里使用BeanDefinition来封装Bean对象，这样可以保存一些额外的元信息。</p>\n<ul><li>创建BeanDefinition<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanDefinition</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object bean;</span><br><span class=\"line\">\t<span class=\"comment\">// constructor and getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Bean工厂<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, BeanDefinition&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.get(name).getBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String name, BeanDefinition beanDefinition)</span></span>&#123;</span><br><span class=\"line\">        beanDefinitionMap.put(name, beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>测试一下<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化工厂</span></span><br><span class=\"line\">        BeanFactory beanFactory= <span class=\"keyword\">new</span> BeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 注入Bean</span></span><br><span class=\"line\">        BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition(<span class=\"keyword\">new</span> HelloService());</span><br><span class=\"line\">        beanFactory.registerBeanDefinition(<span class=\"string\">\"helloService\"</span>, beanDefinition);</span><br><span class=\"line\">        <span class=\"comment\">// 获取Bean</span></span><br><span class=\"line\">        HelloService helloService = (HelloService) beanFactory.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">        helloService.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>可以看到控制台打印出“hello”</p>\n<h2 id=\"将bean创建放入工厂\">将Bean创建放入工厂<a href=\"#将bean创建放入工厂\" title=\"将Bean创建放入工厂\"></a></h2><p>前面的Bean是初始化后（new）再放进去的，而我们希望容器来管理Bean的创建。所以我们将Bean的初始化放进BeanFactory中。将BeanFactory改为接口，并由抽象类 AbstractBeanFactory实现，然后AutowireCapableBeanFactory继承，为我们后面注入属性做准备。</p>\n<ul><li><p>BeanDefinition加入beanClass和beanClassName变量，并写好getter和setter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBeanClassName</span><span class=\"params\">(String beanClassName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.beanClassName = beanClassName;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.beanClass = Class.forName(beanClassName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>BeanFactory改为接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String name, BeanDefinition definition)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>由AbstractBeanFactory实现接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBeanFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinitionMap.get(name).getBean();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String name, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">        Object object = doCreateBean(beanDefinition);</span><br><span class=\"line\">        beanDefinition.setBean(object);</span><br><span class=\"line\">        beanDefinitionMap.put(name, beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(BeanDefinition beanDefinition)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>AutowireCapableBeanFactory继承抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutowireCapableBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBeanFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">            Java 9起废弃clazz.newInstance()方法,</span></span><br><span class=\"line\"><span class=\"comment\">            可用clazz.getDeclaredConstructor().newInstance()代替</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            Object bean = beanDefinition.getBeanClass().getDeclaredConstructor().newInstance();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化Bean工厂</span></span><br><span class=\"line\">        BeanFactory beanFactory = <span class=\"keyword\">new</span> AutowireCapableBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 注入Bean</span></span><br><span class=\"line\">        BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition();</span><br><span class=\"line\">      beanDefinition.setBeanClassName(<span class=\"string\">\"cxc.tinyioc.HelloService\"</span>);</span><br><span class=\"line\">        beanFactory.registerBeanDefinition(<span class=\"string\">\"helloService\"</span>, beanDefinition);</span><br><span class=\"line\">        <span class=\"comment\">// 获取Bean</span></span><br><span class=\"line\">        HelloService helloService = (HelloService) beanFactory.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">        helloService.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>同样可以看到控制台打印出“hello”</p>\n<h2 id=\"为bean注入属性\">为Bean注入属性<a href=\"#为bean注入属性\" title=\"为Bean注入属性\"></a></h2><p>这一步，我们想要为bean注入属性。我们选择将属性注入信息保存成PropertyValue对象，并且保存到BeanDefinition中。这样在初始化bean的时候，我们就可以根据PropertyValue来进行bean属性的注入。Spring本身使用了setter来进行注入，这里为了代码简洁，我们使用Field的形式来注入。</p>\n<ul><li><p>PropertyValue，用于Bean的属性注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertyValue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Object value;</span><br><span class=\"line\">\t<span class=\"comment\">// constructor and getter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>PropertyValues，包装所有PropertyValue</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PropertyValues</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;PropertyValue&gt; propertyValueList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addPropertyValue</span><span class=\"params\">(PropertyValue propertyValue)</span> </span>&#123;</span><br><span class=\"line\">        propertyValueList.add(propertyValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;PropertyValue&gt; <span class=\"title\">getPropertyValueList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> propertyValueList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>修改AutowireCapableBeanFactory以使对Bean设置属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutowireCapableBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBeanFactory</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object bean = createBeanInstance(beanDefinition);</span><br><span class=\"line\">        applyPropertyValues(bean, beanDefinition);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">createBeanInstance</span><span class=\"params\">(BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinition.getBeanClass().getDeclaredConstructor().newInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">applyPropertyValues</span><span class=\"params\">(Object bean, BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (PropertyValue propertyValue : beanDefinition.getPropertyValues().getPropertyValueList()) &#123;</span><br><span class=\"line\">            Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class=\"line\">            declaredField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            declaredField.set(bean, propertyValue.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化工厂</span></span><br><span class=\"line\">    BeanFactory beanFactory= <span class=\"keyword\">new</span> AutowireCapableBeanFactory();</span><br><span class=\"line\">    <span class=\"comment\">// Bean定义</span></span><br><span class=\"line\">    BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition();</span><br><span class=\"line\">    beanDefinition.setBeanClassName(<span class=\"string\">\"cxc.tinyioc.HelloService\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 装填属性</span></span><br><span class=\"line\">    PropertyValues propertyValues = <span class=\"keyword\">new</span> PropertyValues();</span><br><span class=\"line\">    propertyValues.addPropertyValue(<span class=\"keyword\">new</span> PropertyValue(<span class=\"string\">\"text\"</span>, <span class=\"string\">\"hello world\"</span>));</span><br><span class=\"line\">    beanDefinition.setPropertyValues(propertyValues);</span><br><span class=\"line\">    <span class=\"comment\">// 注入</span></span><br><span class=\"line\">    beanFactory.registerBeanDefinition(<span class=\"string\">\"helloService\"</span>, beanDefinition);</span><br><span class=\"line\">    <span class=\"comment\">// 获取Bean</span></span><br><span class=\"line\">    HelloService helloService = (HelloService) beanFactory.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">    helloService.helloworld();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>控制台打印出“hello”</p>\n<h2 id=\"读取xml配置来初始化bean\">读取xml配置来初始化Bean<a href=\"#读取xml配置来初始化bean\" title=\"读取xml配置来初始化Bean\"></a></h2><p>我们在Spring中一般是通过编写xml文件来加载Bean的，所以我们需要用URL类定位到xml所在位置，获取文件输入流后，通过DocumentBuilder对xml进行解析，再用PropertyValues和PropertyValue实现对属性的装填。</p>\n<ul><li><p>接口Resource</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Resource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>UrlResource类，通过url建立连接并获取字节流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UrlResource</span> <span class=\"keyword\">implements</span> <span class=\"title\">Resource</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> URL url;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UrlResource</span><span class=\"params\">(URL url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        URLConnection urlConnection = url.openConnection();</span><br><span class=\"line\">        urlConnection.connect();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> urlConnection.getInputStream();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ResourceLoader，用于get一个Resource</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResourceLoader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Resource <span class=\"title\">getResource</span><span class=\"params\">(String location)</span> </span>&#123;</span><br><span class=\"line\">        URL resource = <span class=\"keyword\">this</span>.getClass().getClassLoader().getResource(location);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UrlResource(resource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>接口BeanDefinitionReader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BeanDefinitionReader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String location)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>抽象类AbstractBeanDefinitionReader，内置Map保存String-BeanDefinition，内置ResourceLoader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBeanDefinitionReader</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanDefinitionReader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, BeanDefinition&gt; registry;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResourceLoader resourceLoader;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractBeanDefinitionReader</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.registry = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, BeanDefinition&gt; <span class=\"title\">getRegistry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ResourceLoader <span class=\"title\">getResourceLoader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>XmlBeanDefinitionReader，实现加载BeanDefinitions</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XmlBeanDefinitionReader</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBeanDefinitionReader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XmlBeanDefinitionReader</span><span class=\"params\">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(resourceLoader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadBeanDefinitions</span><span class=\"params\">(String location)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        InputStream inputStream = getResourceLoader().getResource(location).getInputStream();</span><br><span class=\"line\">        doLoadBeanDefinitions(inputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doLoadBeanDefinitions</span><span class=\"params\">(InputStream inputStream)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class=\"line\">        DocumentBuilder documentBuilder = factory.newDocumentBuilder();</span><br><span class=\"line\">        Document document = documentBuilder.parse(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        registerBeanDefinitions(document);</span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinitions</span><span class=\"params\">(Document document)</span> </span>&#123;</span><br><span class=\"line\">        Element root = document.getDocumentElement();</span><br><span class=\"line\">        parseBeanDefinitions(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseBeanDefinitions</span><span class=\"params\">(Element root)</span> </span>&#123;</span><br><span class=\"line\">        NodeList nodeList = root.getChildNodes();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = nodeList.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element element = (Element) node;</span><br><span class=\"line\">                processBeanDefinition(element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinition</span><span class=\"params\">(Element element)</span> </span>&#123;</span><br><span class=\"line\">        String name = element.getAttribute(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        String className = element.getAttribute(<span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        BeanDefinition beanDefinition = <span class=\"keyword\">new</span> BeanDefinition();</span><br><span class=\"line\">        processProperty(element, beanDefinition);</span><br><span class=\"line\">        beanDefinition.setBeanClassName(className);</span><br><span class=\"line\">        getRegistry().put(name, beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processProperty</span><span class=\"params\">(Element element, BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class=\"line\">        NodeList propertyNode = element.getElementsByTagName(<span class=\"string\">\"property\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; propertyNode.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = propertyNode.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element propertyElement = (Element) node;</span><br><span class=\"line\">                String name = propertyElement.getAttribute(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">                String value = propertyElement.getAttribute(<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">                beanDefinition.getPropertyValues().addPropertyValue(<span class=\"keyword\">new</span> PropertyValue(name, value));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>建个xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cxc.tinyioc.HelloService\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Hello World!\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactoryTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化工厂</span></span><br><span class=\"line\">        BeanFactory beanFactory= <span class=\"keyword\">new</span> AutowireCapableBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 读取xml</span></span><br><span class=\"line\">        XmlBeanDefinitionReader xmlBeanDefinitionReader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(<span class=\"keyword\">new</span> ResourceLoader());</span><br><span class=\"line\">        xmlBeanDefinitionReader.loadBeanDefinitions(<span class=\"string\">\"tinyioc.xml\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 注入Bean</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">            beanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取Bean</span></span><br><span class=\"line\">        HelloService helloService = (HelloService) beanFactory.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">        helloService.helloworld();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n</ul><h2 id=\"在bean里注入bean\">在Bean里注入Bean<a href=\"#在bean里注入bean\" title=\"在Bean里注入Bean\"></a></h2><p>两个问题：ref怎么实现？怎么解决循环依赖？<br>第一个问题好解决。判断是ref还是value，如果是value直接PropertyValue封装，如果是ref，则用BeanReference封装。</p>\n<ul><li><p>BeanReference用于ref</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanReference</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object bean;</span><br><span class=\"line\">    <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>processProperty时加一下判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processProperty</span><span class=\"params\">(Element element, BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">        NodeList propertyNode = element.getElementsByTagName(<span class=\"string\">\"property\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; propertyNode.getLength(); i++) &#123;</span><br><span class=\"line\">            Node node = propertyNode.item(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node <span class=\"keyword\">instanceof</span> Element) &#123;</span><br><span class=\"line\">                Element propertyElement = (Element) node;</span><br><span class=\"line\">                String name = propertyElement.getAttribute(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">                String value = propertyElement.getAttribute(<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span> &amp;&amp; value.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    beanDefinition.getPropertyValues().addPropertyValue(<span class=\"keyword\">new</span> PropertyValue(name, value));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    String ref = propertyElement.getAttribute(<span class=\"string\">\"ref\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ref == <span class=\"keyword\">null</span> || ref.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException(<span class=\"string\">\"Configuration problem: &lt;property&gt; element for property '\"</span></span><br><span class=\"line\">                                + name + <span class=\"string\">\"' must specify a ref or value\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    BeanReference beanReference = <span class=\"keyword\">new</span> BeanReference(ref);</span><br><span class=\"line\">                    beanDefinition.getPropertyValues().addPropertyValue(<span class=\"keyword\">new</span> PropertyValue(name, beanReference));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>applyPropertyValues时也先判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">applyPropertyValues</span><span class=\"params\">(Object bean, BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (PropertyValue propertyValue : beanDefinition.getPropertyValues().getPropertyValueList()) &#123;</span><br><span class=\"line\">        Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());</span><br><span class=\"line\">        declaredField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        Object value = propertyValue.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> BeanReference) &#123;</span><br><span class=\"line\">            BeanReference beanReference = (BeanReference) value;</span><br><span class=\"line\">            value = getBean(beanReference.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        declaredField.set(bean, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>第二个问题，使用懒加载机制，将createBean的事情放到getBean的时候才执行，这样在注入时如果对应的Bean找不到，就可以先创建，因为总是先创建再注入，所以不会出现两个循环依赖的Bean锁死问题。</p>\n<ul><li><p>AbstractBeanFactory里改下registerBeanDefinition</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    BeanDefinition beanDefinition = beanDefinitionMap.get(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinition == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalAccessException(<span class=\"string\">\"No bean named \"</span> + name + <span class=\"string\">\" is defined\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Object bean = beanDefinition.getBean();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        bean = doCreateBean(beanDefinition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerBeanDefinition</span><span class=\"params\">(String name, BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    beanDefinitionMap.put(name, beanDefinition);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>循环依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outputService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cxc.tinyioc.OutputService\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"helloService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"helloService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cxc.tinyioc.HelloService\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Hello !\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outputService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"outputService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>doCreateBean时，创建的Bean（即使是空的或非完全体）放入BeanDefinitin，这样Bean里引用的Bean再回过头来引用时，前者的引用已经建好，这样就不会出现无限循环的问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doCreateBean</span><span class=\"params\">(BeanDefinition beanDefinition)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">     Object bean = createBeanInstance(beanDefinition);</span><br><span class=\"line\">     beanDefinition.setBean(bean);</span><br><span class=\"line\">     applyPropertyValues(bean, beanDefinition);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n</ul><h2 id=\"applicationcontext封装之前的操作\">ApplicationContext封装之前的操作<a href=\"#applicationcontext封装之前的操作\" title=\"ApplicationContext封装之前的操作\"></a></h2><p>基本已经实现了IoC，但是使用起来有点麻烦。所以创建ApplicationContext接口，并在具体实现类中完成Bean的初始化工作。解决根据地址获取 IoC 容器并使用的问题</p>\n<ul><li><p>ApplicationContext接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationContext</span> <span class=\"keyword\">extends</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>AbstractApplicationContext抽象类，有工厂成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractApplicationContext</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContext</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractBeanFactory abstractBeanFactory;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AbstractApplicationContext</span><span class=\"params\">(AbstractBeanFactory abstractBeanFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.abstractBeanFactory = abstractBeanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> abstractBeanFactory.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>ClassPathXmlApplicationContext，重写refresh，完成对Bean的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassPathXmlApplicationContext</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractApplicationContext</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configLocation;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassPathXmlApplicationContext</span><span class=\"params\">(String configLocation)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(configLocation, <span class=\"keyword\">new</span> AutowireCapableBeanFactory());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassPathXmlApplicationContext</span><span class=\"params\">(String configLocation, AbstractBeanFactory abstractBeanFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractBeanFactory);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.configLocation = configLocation;</span><br><span class=\"line\">        refresh();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        XmlBeanDefinitionReader xmlBeanDefinitionReader = <span class=\"keyword\">new</span> XmlBeanDefinitionReader(<span class=\"keyword\">new</span> ResourceLoader());</span><br><span class=\"line\">        xmlBeanDefinitionReader.loadBeanDefinitions(configLocation);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;String, BeanDefinition&gt; beanDefinitionEntry : xmlBeanDefinitionReader.getRegistry().entrySet()) &#123;</span><br><span class=\"line\">            abstractBeanFactory.registerBeanDefinition(beanDefinitionEntry.getKey(), beanDefinitionEntry.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"tinyioc.xml\"</span>);</span><br><span class=\"line\">        HelloService helloService = (HelloService) applicationContext.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\">        helloService.helloworld(<span class=\"string\">\"hello ApplicationContext\"</span>);</span><br><span class=\"line\">        OutputService outputService = (OutputService) applicationContext.getBean(<span class=\"string\">\"outputService\"</span>);</span><br><span class=\"line\">        outputService.output(<span class=\"string\">\"ref ref ref\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>至此，Spring的基本IoC功能已经基本完成。</p>\n<p>梳理一下，在tiny-spring中，由ClassPathXmlApplicationContext获取xml资源路径，其构造方法调用refresh()处理，refresh()中使用XmlBeanDefinitionReader读取资源中含有的BeanDefinition，读取后保存在内置的registry（key-value为String-BeanDefinition的哈希表）。接着BeanFactory注册每个registry中的键值，保存在BeanDefinitionMap中，preInstantiateSingletons()单例模式初始化所有Bean。使用 对象时由ApplicationContext去getBean(name)即可。</p>\n<h2 id=\"设计模式\">设计模式<a href=\"#设计模式\" title=\"设计模式\"></a></h2><ul><li>模板模式</li>\n</ul><p>例如在AbstractApplicationContext中将refresh()交给子类实现，ClassPathXmlApplicationContext实现类路径加载xml，而其他不同子类可以有不同实现（文件系统目录加载等）。</p>\n<ul><li>代理模式</li>\n</ul><p>ApplicationContext继承BeanFactoory，具备getBean()，但又内置了一个BeanFactory实例。getBean()调用实例的getBean()去完成获取Bean。</p>\n<h1 id=\"aop\">AOP<a href=\"#aop\" title=\"AOP\"></a></h1><h2 id=\"使用jdk动态代理实现aop织入\">使用JDK动态代理实现AOP织入<a href=\"#使用jdk动态代理实现aop织入\" title=\"使用JDK动态代理实现AOP织入\"></a></h2><p>先将被代理对象和方法拦截器封装成AdvisedSupport类，MethodInterceptor即AOP中的基本角色Advice，定义了在切点的逻辑。</p>\n<ul><li>AdvisedSupport类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdvisedSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TargetSource targetSource;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MethodInterceptor methodInterceptor;</span><br><span class=\"line\">    <span class=\"comment\">// getter and setter</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>接着创建一个类继承MethodInterceptor，在invoke方法里实现我们要的逻辑</p>\n<ul><li>TimeInterceptor类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(MethodInvocation methodInvocation)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Invocation of Method \"</span> + methodInvocation.getMethod().getName() + <span class=\"string\">\" start!\"</span>);</span><br><span class=\"line\">        Object proceed = methodInvocation.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Invocation of Method \"</span> + methodInvocation.getMethod().getName()</span><br><span class=\"line\">                + <span class=\"string\">\" end! tasks \"</span> + (System.currentTimeMillis() - time) + <span class=\"string\">\" milliseconds.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> proceed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>MethodInterceptor的invoke方法有参数MethodInvocation，事实上MethodInvocation就是JointPoint（连接点）。封装target实例，method和args成一个类。</p>\n<ul><li>ReflectiveMethodInvocation类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReflectiveMethodInvocation</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInvocation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method method;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] args;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">proceed</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> method.invoke(target, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// getter and other override method</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>我们要实现动态代理，需要用Proxy.newInstance生成代理类，我们先封装一个动态代理类JdkDynamicAopProxy，实现InvocationHandler接口和AopProxy接口。</p>\n<ul><li>JdkDynamicAopProxy的getProxy方法和invoke方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Proxy.newProxyInstance(getClass().getClassLoader(),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Class[]&#123;advised.getTargetSource().getTargetClass()&#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(<span class=\"keyword\">final</span> Object proxy, <span class=\"keyword\">final</span> Method method, <span class=\"keyword\">final</span> Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">    MethodInterceptor methodInterceptor = advised.getMethodInterceptor();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> methodInterceptor.invoke(<span class=\"keyword\">new</span> ReflectiveMethodInvocation(advised.getTargetSource().getTarget(), method, args));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>到这里就已经实现了一个基本的织入功能。</p>\n<ul><li>测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationContext applicationContext = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"tinyioc.xml\"</span>);</span><br><span class=\"line\">HelloService helloService = (HelloService) applicationContext.getBean(<span class=\"string\">\"helloService\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置代理对象</span></span><br><span class=\"line\">AdvisedSupport advisedSupport=<span class=\"keyword\">new</span> AdvisedSupport();</span><br><span class=\"line\">TargetSource targetSource = <span class=\"keyword\">new</span> TargetSource(helloService, HelloService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">advisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\"><span class=\"comment\">// 设置拦截器</span></span><br><span class=\"line\">TimeInterceptor timeInterceptor=<span class=\"keyword\">new</span> TimeInterceptor();</span><br><span class=\"line\">advisedSupport.setMethodInterceptor(timeInterceptor);</span><br><span class=\"line\"><span class=\"comment\">// 创建代理</span></span><br><span class=\"line\">JdkDynamicAopProxy jdkDynamicAopProxy = <span class=\"keyword\">new</span> JdkDynamicAopProxy(advisedSupport);</span><br><span class=\"line\">HelloService helloServiceProxy = (HelloService) jdkDynamicAopProxy.getProxy();</span><br><span class=\"line\"><span class=\"comment\">// 基于aop调用</span></span><br><span class=\"line\">helloServiceProxy.helloworld(<span class=\"string\">\"hello aop\"</span>);</span><br></pre></td></tr></table></figure></li>\n</ul><h2 id=\"使用aspectj管理切面\">使用AspectJ管理切面<a href=\"#使用aspectj管理切面\" title=\"使用AspectJ管理切面\"></a></h2><p>解决了织入的问题，现在来解决在哪里切。对于在哪切这个问题，叫做“Pointcut”。在Spring中有两个角色，“ClassFilter”和“MethodMatcher”，分别是类过滤器和方法匹配器，两者都是做匹配用。我们在AspectJExpressionPointcut中匹配。AspectJExpressionPointcut主要解决的是</p>\n<ul><li><p>获取expression，即AspectJ风格表达式</p>\n</li>\n<li><p>创建PointcutParser，即解析器</p>\n</li>\n<li><p>expression被解析后成pointcutExpression，是对expression的封装</p>\n</li>\n<li><p>pointcutExpression类匹配：pointcutExpression.couldMatchJoinPointsInType(targetClass)，大概率不准确</p>\n</li>\n<li><p>pointcutExpression方法匹配：pointcutExpression.matchesMethodExecution(method)</p>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectJExpressionPointcutTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testClassFilter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String expression = <span class=\"string\">\"execution(* cxc.tinyioc.*.*(..))\"</span>;</span><br><span class=\"line\">        AspectJExpressionPointcut aspectJExpressionPointcut = <span class=\"keyword\">new</span> AspectJExpressionPointcut();</span><br><span class=\"line\">        aspectJExpressionPointcut.setExpression(expression);</span><br><span class=\"line\">        boolean matches = aspectJExpressionPointcut.getMethodMatcher().matches(HelloServiceImpl.class.getDeclaredMethod(\"helloworld\", String.class), HelloServiceImpl.class);</span><br><span class=\"line\">        Assertions.assertTrue(matches);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><p>AspectJExpressionPointcutAdvisor封装Pointcut和Advice，实现了一个完整的切面，切面Advisor=Pointcut+Advice</p>\n<h2 id=\"将aop融入bean的创建过程\">将AOP融入Bean的创建过程<a href=\"#将aop融入bean的创建过程\" title=\"将AOP融入Bean的创建过程\"></a></h2><p>BeanPostProcessor是BeanFactory提供的，在Bean初始化过程中进行扩展的接口，只要实现了BeanPostProcessor接口，那么在Bean初始化时会调用这个接口，从而实现对BeanFactory无侵入扩展。<br>AspectJAwareAdvisorAutoProxyCreator就是AspectJ方式实现织入的核心。在这里它会扫描所有Pointcut，并对Bean做织入。</p>\n<ul><li><p>对Bean加载后置处理。实现BeanPostProcessor和BeanFactoryAware，前者保证自己被率先实例化，以实现对非AOP实例的前置后置处理；后者保证在初始化自己时setBeanFactory，实现对自身工厂的感知，以用于调用工厂获取切面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> AspectJExpressionPointcutAdvisor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> MethodInterceptor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;AspectJExpressionPointcutAdvisor&gt; advisors = beanFactory.getBeansForType(AspectJExpressionPointcutAdvisor<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (AspectJExpressionPointcutAdvisor advisor : advisors) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (advisor.getPointcut().getClassFilter().matches(bean.getClass())) &#123;</span><br><span class=\"line\">            AdvisedSupport advisedSupport = <span class=\"keyword\">new</span> AdvisedSupport();</span><br><span class=\"line\">            advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());</span><br><span class=\"line\">            advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());</span><br><span class=\"line\">            TargetSource targetSource = <span class=\"keyword\">new</span> TargetSource(bean, bean.getClass().getInterfaces());</span><br><span class=\"line\">            advisedSupport.setTargetSource(targetSource);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JdkDynamicAopProxy(advisedSupport).getProxy();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>理一下AOP融入Bean的流程</p>\n<ul><li>创建ApplicationContext</li>\n<li>开始loadDefinition，将所有bean标签下的内容保存到beanDefinitionMap中</li>\n<li>registerBeanPostProcessor，通过getBeansForType获取所有实现BeanPostProcesser接口的实例并创建，保存到beanPostProcessors</li>\n<li>onfresh单例加载所有Bean，初始化Bean时会触发前置后置处理，在后置中，若是和expression表示的Pointcut匹配则返回被代理过的Bean，否则返回原Bean。</li>\n</ul></li>\n</ul><p>至此，一个AOP基本完工。但是JDK动态代理只能代理接口（JDK没有修改字节码，而是采用$proxy extend Proxy implements Interface的方式创建了一个被代理接口的实现类，然后在运行期写class文件，再用classloader加载。生成的代理类已成继承了Proxy类，Java又不支持多继承），如果要代理类的话，需要使用CGLib。</p>\n<h2 id=\"使用cglib进行类的织入\">使用CGLib进行类的织入<a href=\"#使用cglib进行类的织入\" title=\"使用CGLib进行类的织入\"></a></h2><p>CGLib的原理是对字节码的操作，可以动态生成一个目标实例类的子类，这个子类增加了advice。</p>\n<p>在CGlib中，通过创建Enhancer类实例，传入实现MethodInterceptor接口（CGLib包中的）的类，通过重写intercept实现代理增强。</p>\n<p>我们之前写的JDK代理类的那些代码，如果使用CGLib的话便无法复用。因为两者的MethodInterceptor不同</p>\n<ul><li>net.sf.cglib.proxy.MethodInterceptor</li>\n<li>org.aopalliance.intercept.MethodInterceptor</li>\n</ul><p>所以我们在intercept方法中调用org.aopalliance.intercept.MethodInterceptor不就ok？</p>\n<ul><li>动态Advised拦截器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicAdvisedInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AdvisedSupport advised;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> org.aopalliance.intercept.MethodInterceptor delegateMethodInterceptor;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DynamicAdvisedInterceptor</span><span class=\"params\">(AdvisedSupport advised)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.advised = advised;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.delegateMethodInterceptor = advised.getMethodInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (advised.getMethodMatcher() == <span class=\"keyword\">null</span> || advised.getMethodMatcher().matches(method, advised.getTargetSource().getTargetClass())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> delegateMethodInterceptor.invoke(<span class=\"keyword\">new</span> CglibMethodInvocation(advised.getTargetSource().getTarget(), method, objects, methodProxy));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CglibMethodInvocation(advised.getTargetSource().getTarget(), method, objects, methodProxy).proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul><h1 id=\"一些总结\">一些总结<a href=\"#一些总结\" title=\"一些总结\"></a></h1><ul><li><p>IOC</p>\n<ul><li>通过<strong>读完</strong>xml才赋值给BeanFactory的beanDefinitionMap的方式避免了因顺序问题而导致的诸如失败</li>\n<li>懒加载+空构造器创建实例的方式解决循环依赖的问题（但AOP后会有问题 ）</li>\n</ul></li>\n<li><p>AOP</p>\n<ul><li>AspectJ包完成了对AspectJ风格expression的解析，完成了对类和方法pointcut的判断</li>\n<li>通过实现BeanPostAware接口实现对自身bean工厂的感知，才能通过工厂获取Pointcut</li>\n<li>通过实现BeanPostProcessor接口实现了对非AOP实例的bean生命周期的后置处理中，若实例的类匹配类Pointcut，则返回代理后的类</li>\n<li>运行实例接口方法时，通过invocationHandler.invoke调用</li>\n<li>引入CGLib，在cgib包的methodInterceptor中调用aopalliance包的methodInterceptor，实现xml配置的methodInterceptor可在jdk代理和cglib代理中通用。</li>\n</ul><p>事实上，循环依赖还没有真正解决，例如a ref b，b ref a，a -&gt; doCreateBean，b-&gt; doCreaterBean， b.setBean(a)，此时a为提前暴露的空a，b -&gt; initializeBean，a.setBean(b)，此时b为生成的动态代理对象，a -&gt; initializeBean。完成后，a中的b是代理对象，但b中的a并没有更新为代理对象。</p>\n<p>Spring解决的方案是：三级缓存。</p>\n<p>这部分有空再来完善。</p>\n</li>\n</ul>","plink":"https://cxccao.github.io/2020/06/19/tiny-spring/","toc":[{"id":"引言","title":"引言","index":"1"},{"id":"ioc","title":"IOC","index":"2","children":[{"id":"回顾一下ioc的知识","title":"回顾一下IOC的知识","index":"2.1"},{"id":"最基本的容器","title":"最基本的容器","index":"2.2"},{"id":"将bean创建放入工厂","title":"将Bean创建放入工厂","index":"2.3"},{"id":"为bean注入属性","title":"为Bean注入属性","index":"2.4"},{"id":"读取xml配置来初始化bean","title":"读取xml配置来初始化Bean","index":"2.5"},{"id":"在bean里注入bean","title":"在Bean里注入Bean","index":"2.6"},{"id":"applicationcontext封装之前的操作","title":"ApplicationContext封装之前的操作","index":"2.7"},{"id":"设计模式","title":"设计模式","index":"2.8"}]},{"id":"aop","title":"AOP","index":"3","children":[{"id":"使用jdk动态代理实现aop织入","title":"使用JDK动态代理实现AOP织入","index":"3.1"},{"id":"使用aspectj管理切面","title":"使用AspectJ管理切面","index":"3.2"},{"id":"将aop融入bean的创建过程","title":"将AOP融入Bean的创建过程","index":"3.3"},{"id":"使用cglib进行类的织入","title":"使用CGLib进行类的织入","index":"3.4"}]},{"id":"一些总结","title":"一些总结","index":"4"}],"copyright":{"author":"Shelton Chen","link":"<a href=\"https://cxccao.github.io/2020/06/19/tiny-spring/\" title=\"Tiny-Spring\">https://cxccao.github.io/2020/06/19/tiny-spring/</a>","updated":"2020年6月28日","license":"署名-非商业性使用-相同方式共享 4.0 国际 (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}